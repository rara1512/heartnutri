# -*- coding: utf-8 -*-
"""NutriAssist-DataScrap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZLMX-8szxDXgCmEmZ5vsssy9HQwF7QVP
"""

def parser(food):
  import requests
    
  # api-endpoint
  URL = "https://api.edamam.com/api/food-database/v2/parser"
    
    
  # defining a params dict for the parameters to be sent to the API
  PARAMS = {'app_id':'','app_key':'','ingr':food}
    
  # sending get request and saving the response as response object
  r = requests.get(url = URL, params = PARAMS)
    
  # extracting data in json format
  data = r.json()
    
  return data

def nutrition(data):
  import requests
  URL = "https://api.edamam.com/api/food-database/v2/nutrients"
  fID = data['hints'][0]['food']['foodId']
  measueURI = data['hints'][0]['measures'][1]['uri']
  # defining a params dict for the parameters to be sent to the API
  DATA = {"ingredients": [
      {
        "quantity": 1,
        "measureURI": measueURI,
        "foodId": fID
      }
    ]
  }

  PARAMS = {
      'app_id':'e3d98672',
      'app_key':'180e05090106d0ca73f57837e31f9455'
  }

  # sending get request and saving the response as response object
  r2 = requests.post(url = URL, params=PARAMS, json = DATA)
  # extracting data in json format
  data2 = r2.json()
  return data2

def retrieve():
  import requests
  import pandas as pd
  import time
  foodData = pd.read_csv('/content/Cuisine and Food items - Dishes.csv',header = None)
  foodDict = {}
  count = 0
  for row in foodData.itertuples():
    dish = row[1]
    start = time.time()
    a = parser(dish)
    if len(a['hints']) > 0:
      foodDict[dish] = nutrition(a)
      count += 1
    if count == 99:
      count = 0
      end = time.time()
      duration = end - start
      if duration < 61:
        time.sleep(61 - duration)
  return foodDict

foodDict = retrieve()

import json

with open("FoodData.json", "w") as outfile:
    json.dump(foodDict, outfile)

import json
 
# Opening JSON file
f = open('FoodData.json')
 
# returns JSON object as
# a dictionary
data = json.load(f)

f.close()

MacroN = {'Food': [], 'Carbs DV%': [], 'Fats DV%': [], 'Proteins DV%': [], 'Vegetarian':[], 'Gluten-Free':[], 'Kosher':[]}

for k,v in data.items():
    if 'FAT' in v['totalDaily'].keys():
        MacroN['Food'].append(k)
        MacroN['Fats DV%'].append(v['totalDaily']['FAT']['quantity'])
        MacroN['Proteins DV%'].append(v['totalDaily']['PROCNT']['quantity'])
        MacroN['Carbs DV%'].append(v['totalDaily']['CHOCDF']['quantity'])
        if 'VEGETARIAN' in v['healthLabels']:
          MacroN['Vegetarian'].append(1)
        else:
          MacroN['Vegetarian'].append(0)
        if 'GLUTEN_FREE' in v['healthLabels']:
          MacroN['Gluten-Free'].append(1)
        else:
          MacroN['Gluten-Free'].append(0)
        if 'KOSHER' in v['healthLabels']:
          MacroN['Kosher'].append(1)
        else:
          MacroN['Kosher'].append(0)

import pandas as pd
Macros = pd.DataFrame.from_dict(MacroN)

Macros.to_csv('foodRatings.csv')

import numpy as np

from sklearn.cluster import KMeans
X = Macros

kmeans = KMeans(n_clusters=18, n_init=3, max_iter=3000, random_state=1)

# Cluster using SOME columns
kmeans = kmeans.fit(X[['Carbs DV%','Fats DV%','Proteins DV%']])
# Save the labels
X.loc[:,'labels'] = kmeans.labels_